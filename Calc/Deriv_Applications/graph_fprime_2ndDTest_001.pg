# DESCRIPTION
#   Create a graph of a function with multiple segments
#   of increasing/decreasing behavior and ask the student
#   to identify the corresponding intervals.
# ENDDESCRIPTION

## Author('D. B. Walton')
## Institution('James Madison University')
## KEYWORDS('function','derivative', 'second derivative test')
## Date('8/17/10')

## DBsubject('Calculus')
## DBchapter('')
## DBsection('')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "contextString.pl",
  "PGchoicemacros.pl",
  "PGgraphmacros.pl",
  "PGpolynomialmacros.pl",
  "problemRandomize.pl"
);

TEXT(beginproblem);

##########
# Setup context specific items
##########
Context("Numeric");
$pr = ProblemRandomize(onlyAfterDue=>0);
$refreshCachedImages=1;

##########
# Determine random character for problem.
##########

$numCritical = random(2, 4);
$numSuperCritical = $numCritical - 1;

$minHSpace = 1;
$maxHSpace = 3;

$minVSpace = 1;
$maxVSpace = 6;

$totPossIncr = $maxHSpace * $maxVSpace;

# Identify the location of critical points and "super"-critical points
$critPt[0] = 0;
$minY = 0;
$max = 0;
for ($i = 0; $i<$numSuperCritical; $i++) {
    # The left-side of each interval must match the slope, and can randomly choose consistent horizontal and vertical displacements.
    # Of course the extreme value has no matching to worry about.
    if ($i==0) {
        $hdisp = random($minHSpace, $maxHSpace);
        $vdisp = random($minVSpace, $maxVSpace);

        $preSlope = random(3*$vdisp, 6*$vdisp);
        $slope[$i] = $preSlope / (2*$hdisp);

        $d1sgn[0] = non_zero_random(-1,1);
    } else {
        # Choose displacements consistent with the slope.
        @randomIncrList = NchooseK($totPossIncr, $totPossIncr);

        # Loop is guaranteed to terminate by at least finding identical increment as previously.
        $k=0;
        do {
            $hdisp = ($randomIncrList[$k] % ($maxHSpace-$minHSpace+1)) + $minHSpace;
            $vdisp = ($randomIncrList[$k] + $minHSpace - $hdisp) / ($maxHSpace-$minHSpace+1) + $minVSpace;
            $k++;
        } while $k<$totPossIncr && (2*$slope[$i]*$hdisp < 3*$vdisp || 2*$slope[$i]*$hdisp > 6*$vdisp);

        $d1sgn[$i] = -$d1sgn[$i-1];
    }
    # Set the information.
    $superCritPt[$i] = $critPt[$i] + $hdisp;
    $fPrimeExtreme[$i] = $d1sgn[$i] * $vdisp;
    if ($fPrimeExtreme[$i] > $maxY) {
        $maxY = $fPrimeExtreme[$i];
    } 
    if ($fPrimeExtreme[$i] < $minY) {
        $minY = $fPrimeExtreme[$i];
    }
        
    # The right-side of each interval gets to choose the horizontal displacement and random slope
    # but must match the vertical displacement.
    $hdisp = random($minHSpace, $maxHSpace);
    
    $preSlope = random(3*$vdisp, 6*$vdisp);
    $critPt[$i+1] = $superCritPt[$i] + $hdisp;
    $slope[$i+1] = $preSlope / (2*$hdisp);    # Find the x-coordinates of critical points of f' and of f
}
$d1sgn[$numCritical-1] = -$d1sgn[$numSuperCritical-1];

$totalWidth = $critPt[$numSuperCritical] - $critPt[0];
$totalHeight = $maxY - $minY;

# Based on the above information, the piecewise cubic function is specified up to a translation.
# We still need to identify the starting point.
$x[0] = random(-$totalWidth + ($totalWidth - ($totalWidth % 3))/3, 5, 1);
for ($k=0; $k<$numCritical; $k++) {
    $critPt[$k] += $x[0];
}
for ($k=0; $k<$numSuperCritical; $k++) {
    $superCritPt[$k] += $x[0];
}

$y[0] = 0;
$minX = $x[0];
$maxX = $x[0] + $totalWidth;

$xLimMin = $minX - 1;
$xLimMax = $maxX + 1;
$yLimMin = $minY - 2;
$yLimMax = $maxY + 2;

$graph = init_graph($xLimMin, $yLimMin, $xLimMax, $yLimMax,
             'axes'=>[0,0], 
             'grid'=>[$xLimMax-$xLimMin, $yLimMax-$yLimMin],
             'size'=>[300,300]
         );
$grcol = 'red';

# Now go through the intervals to find each of the parts and determine the intervals for the answer.

for ($k=0; $k<$numSuperCritical; $k++) {
    if ($k == 0) {
        $m = $d1sgn[0]*$slope[0];
        $fcn = "$m*(x-$critPt[0]) for x in <$xLimMin,$critPt[0]> using color:$grcol and weight:2";
        add_functions($graph, $fcn);
    }
    $xA = $critPt[$k];
    $xB = $superCritPt[$k];

    $m = $slope[$k];
    $hdisp = $superCritPt[$k] - $critPt[$k];
    $vdisp = abs($fPrimeExtreme[$k]);
    $a = ($m-2*$vdisp/$hdisp)/($hdisp**2);
    $b = (3*$vdisp/$hdisp - 2*$m)/$hdisp;

    $fcnL[$k] = "$d1sgn[$k]*(x-$critPt[$k])*($m+(x-$critPt[$k])*($b + $a*(x-$critPt[$k])))" .
                   " for x in <$xA, $xB> using color:$grcol and weight:2";

    $xA = $superCritPt[$k];
    $xB = $critPt[$k+1];

    $m = $slope[$k+1];
    $hdisp = $critPt[$k+1] - $superCritPt[$k];
    $vdisp = abs($fPrimeExtreme[$k]);
    $a = ($m-2*$vdisp/$hdisp)/($hdisp**2);
    $b = (3*$vdisp/$hdisp - 2*$m)/$hdisp;

    $fcnR[$k] = "$d1sgn[$k]*($critPt[$k+1]-x)*($m+($critPt[$k+1]-x)*($b + $a*($critPt[$k+1]-x)))" .
                   " for x in <$xA, $xB> using color:$grcol and weight:2";

    add_functions($graph, $fcnL[$k]);
    add_functions($graph, $fcnR[$k]);
    $graph->stamps( closed_circle($critPt[$k], 0, $grcol) );
    $graph->stamps( closed_circle($superCritPt[$k], $fPrimeExtreme[$k], $grcol) );
    $vStr = ('top', 'middle', 'bottom')[$d1sgn[$k]+1];
    $graph->lb( new Label( $superCritPt[$k], $fPrimeExtreme[$k]+($d1sgn[$k]*0.1), "($superCritPt[$k],$fPrimeExtreme[$k])",
                'black', 'center', $vStr
            ));
}
$m = $d1sgn[$numCritical-1]*$slope[$numCritical-1];
$fcn = "$m*(x-$critPt[$numCritical-1]) for x in <$critPt[$numCritical-1],$xLimMax> using color:$grcol and weight:2";
add_functions($graph, $fcn);
$graph->stamps( closed_circle($critPt[$numCritical-1], 0, $grcol) );

$critPtAns = List(@critPt);

# Determine the results of first derivative test.
# This problem has no undetermined critical points.
Context("String");
Context()->strings->add("+"=>{}, "-"=>{}, "MAX"=>{}, "MIN"=>{}, "NOT"=>{}, "UND"=>{});
Context()->operators->redefine(",", from=>"Numeric");

@signChoices = ("-", "0", "+");
@classifyChoices = ("MAX", "", "MIN");

for ($k=0; $k<$numCritical; $k++) {
    $signs[$k] = String($signChoices[$d1sgn[$k]+1]);
    $classify[$k] = String($classifyChoices[$d1sgn[$k]+1]);
}
$signAns = List(@signs);
$classifyAns = List(@classify);

Context()->texStrings;
BEGIN_TEXT
$PAR
The graph of the derivative of a function \(y=f'(x)\) is shown below along with key points
for this problem.  (Assume the ends continue as shown indefinitely.)
$BR
$BCENTER
\{ image(insertGraph($graph), width=>250, height=>250) \}
$BR
(Click on the graph to enlarge it.)
$ECENTER

$PAR
Identify all $BBOLD critical points $EBOLD of the unknown function \(f\).
List the \(x\)-values of these critical points as a comma-separated list in increasing order.
$BR
Critical points of \(f\): \{ ans_rule(30) \}

$PAR
Find the sign of \(f''(x)\) (\(+\), \(-\) or \(0\)) at each of the critical points.
Use a comma-separated list in the same order as above.
$BR
Signs of \(f''(x)\): \{ ans_rule(30) \}

$PAR
For each of the critical points above (and in the same order), indicate if the Second Derivative Test indicates
that the critical point is a local maximum, a local minimum, not an extreme, or undetermined by creating a comma-separated list 
using keywords $BBOLD MAX $EBOLD, $BBOLD MIN $EBOLD, $BBOLD NOT $EBOLD, or $BBOLD UND $EBOLD, respectively.
$BR
Classification of points: \{ ans_rule(40) \}

END_TEXT

Context()->normalStrings;

$showPartialCorrectAnswers = 1;


ANS( $critPtAns->cmp(ordered=>1) );
ANS( $signAns->cmp(ordered=>1, entry_type=>"sign", showHints=>0) );
ANS( $classifyAns->cmp(ordered=>1, entry_type=>"classification", showHints=>0) );

ENDDOCUMENT();        # This should be the last executable line in the problem.;
