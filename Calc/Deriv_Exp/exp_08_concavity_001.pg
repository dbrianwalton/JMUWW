## DESCRIPTION
## Algebra
## ENDDESCRIPTION

## KEYWORDS('calculus','derivative', 'exponential', 'concavity')
## Tagged by dbw 7/27/11

## DBsubject('Calculus')
## DBchapter('')
## DBsection('')
## Date('7/27/11')
## Author('D. B. Walton')
## Institution('James Madison University')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGjmu_poly.pl",
  "problemRandomize.pl"
);

TEXT(beginproblem);

###################################
# Setup

Context("Numeric");
##############################################

$pr = ProblemRandomize(onlyAfterDue=>0);

# Determine the rates so that non-zero and non-equal.
$k[0] = non_zero_random(-5,5);
do {
  $dk = non_zero_random(-4,4);
} while ($dk == $k[0]);
$k[1] = $k[0] - $dk;

$A[0] = random(1,10);
$A[1] = non_zero_random(-10,10);

$func = Compute("$A[0]*e^($k[0]*x)+$A[1]*e^($k[1]*x)")->reduce('(-x)-y'=>0);

Context("Interval");

if ($A[1] < 0) {
    ## If opposite sign, there is point of inflection.
    if ($dk > 0) {
      $fstr = FractionString([-$A[1]*$k[1]**2, $A[0]*$k[0]**2]);
      $c = "(1/$dk)*ln($fstr)";
    } else {
      $fstr = FractionString([$A[0]*$k[0]**2, -$A[1]*$k[1]**2]);
      $dkn = -$dk;
      $c = "(1/$dkn)*ln($fstr)";
    }

    $leftInterval = Compute("(-INF, $c)");
    $rightInterval = Compute("($c, INF)");
    if ($dk > 0) {
        $ccuInterval = List($rightInterval);
        $ccdInterval = List($leftInterval);
    } else {
        $ccdInterval = List($rightInterval);
        $ccuInterval = List($leftInterval);
    }
} else {
    ## Otherwise, always same concavity.
    $ccuInterval = List(Interval("(-INF,INF)"));
    $ccdInterval = List("None");
}

Context()->texStrings;
BEGIN_TEXT
$PAR Determine the intervals where the function \(f(x) = $func\)
is concave up and where it is concave down.
$BR 
$BBLOCKQUOTE
$BR
\(f\) is concave up on: \{ ans_rule(30) \}
$BR $BR
\(f\) is concave down on: \{ ans_rule(30) \}
$BR
$EBLOCKQUOTE

$PAR
List open intervals separated by commas.  Type ${BBOLD}NONE${EBOLD} if there are no such intervals. Type ${BBOLD}INF${EBOLD} for \(\infty\).
END_TEXT

Context()->normalStrings;

$showPartialCorrectAnswers = 1;

ANS( $ccuInterval->cmp );
ANS( $ccdInterval->cmp );

ENDDOCUMENT();        # This should be the last executable line in the problem.;
