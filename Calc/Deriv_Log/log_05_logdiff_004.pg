## DESCRIPTION
## Algebra
## ENDDESCRIPTION

## KEYWORDS('calculus','derivative', 'logarithm', 'logarithmic differentiation')
## Tagged by dbw 7/28/11

## DBsubject('Calculus')
## DBchapter('')
## DBsection('')
## Date('7/28/11')
## Author('D. B. Walton')
## Institution('James Madison University')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGchoicemacros.pl",
  "parserMultiAnswer.pl",
);

TEXT(beginproblem);

###################################
# Setup

Context("Numeric");
##############################################




## Prepare the function and the answer.
$realTerms = $n = 3;
@vList = ();
@wList = ();
@dList = ();
$numNumer = random(0,$n-1);
$numDenom = $n - $numNumer;

@cvals = (-10 .. 10);
@c = @cvals[NchooseK(scalar(@cvals),$n)];
@k = (1)*$n;
$numer = $denom = Formula(1);
$logFunc = Formula(0);
for ($i=0; $i<$n; $i++) {
    $k[$i] = random(1, 5);
    if ($i<$numNumer) {
        $numer = $numer * Formula("(x+$c[$i])^($k[$i])");
        $sign = +1;
    } else {
        $denom = $denom * Formula("(x+$c[$i])^($k[$i])");
        $sign = -1;
    }
    $logFunc = $logFunc + Formula("$sign * $k[$i]*ln(abs(x+$c[$i]))");


    ## d/dx[k ln|x+c|] = k/(x+c)
    ($vList[$i], $wList[$i], $dList[$i]) = (Formula("$sign*$k[$i]"), Formula("x+$c[$i]"), Formula("$sign*$k[$i]/(x+$c[$i])"));
}

$func = $numer / $denom;
$func = $func->reduce();
$logFunc = $logFunc->reduce();

@mp = ();
$logDeriv = Formula(0);
for ($i=0; $i<$realTerms; $i++) {
    @curList = ($vList[$i], $wList[$i], $dList[$i]);
    $fullTerm[$i] = Formula("$vList[$i]*ln(abs($wList[$i]))");
    $logDeriv = $logDeriv + $dList[$i];
    $mp[$i] = MultiAnswer(@curList)->with(
        singleResult => 1, allowBlankAnswer => 0
    );
}

$deriv = $logDeriv * $func;

#####
# Load from the last entry how many terms are required.
#####
if (defined $inputs_ref->{'numTerms'}) {
    $numTerms = $inputs_ref->{'numTerms'};
} else {
    $numTerms = 1;
}
@rawTerm = (Formula("0"), Formula("1"), Formula("0"));
for ($i=$realTerms; $i < $numTerms; $i++) {
    $mp[$i] = MultiAnswer(@rawTerm)->with(
        singleResult => 1, allowBlankAnswer => 0
    );
}

$INPUTSPACE = M3( qq! \\rule{${len}in}{.01in}!,
qq!\begin{rawhtml}<INPUT TYPE = "TEXT" NAME="numTerms"
VALUE="$numTerms">\end{rawhtml}!,
qq!<INPUT TYPE = "TEXT" NAME="numTerms" VALUE="$numTerms">!
);

Context()->texStrings;
BEGIN_TEXT
$PAR Practice using logarithmic differentiation on the power function \(\displaystyle f(x) = $func\).

$PAR
${BBOLD}Step 1${EBOLD}: Define \(u = \ln|f(x)|\). Substitute the formula:
$BR
\(u = \) \{ labeled_ans_rule('logFormula', 20) \}

$PAR
${BBOLD}Step 2${EBOLD}: Use the properties of logarithms to create a sum of terms,
none of which involve the logarithm of a product, quotient, or power, if possible.

$PAR Typically, the expansion of \(u\) will involve several terms of the form \(V \ln|W|\). 
How many of these terms appear in the expansion? \{ $INPUTSPACE \}
$BR (Press ${BBOLD}Preview Answer${EBOLD} to update the number of blanks below.)

$PAR Fill in the table below, identifying the expressions corresponding to \(V\) and \(W\) for
each of these terms.  For any terms in which the logarithm is not really needed on a term 
because \(\ln(e)=1\), group all such terms together in \(V\) and use \(W=e\) on a single row.
Then compute the derivative of each term in the third column.

$BR
$BCENTER
\{ begintable(6) \}
\{ row( " $SPACE \(d/dx[\) $SPACE ", "$SPACE \(V\) $SPACE", " $SPACE \(\ln|\) $SPACE ", 
        "$SPACE W $SPACE"," $SPACE \(|] = \) $SPACE ", "$SPACE derivative formula $SPACE")
\}
END_TEXT

for ($i=0; $i < $numTerms; $i++) {
    if ($i < $realTerms) {
        @curList = @$termList[$i];
    } else {
        @curList = @$termList[0];
    }
    BEGIN_TEXT
    \{
      row( " $SPACE \(d/dx[\) $SPACE ", $mp[$i]->ans_rule(25), " $SPACE \(\ln|\) $SPACE ", 
           $mp[$i]->ans_rule(25), " $SPACE \(|] = \) $SPACE ", $mp[$i]->ans_rule(25) )
    \}
    END_TEXT
}

BEGIN_TEXT
\{ endtable() \}
$ECENTER

$PAR
${BBOLD}Step 3${EBOLD}: Add the derivatives of the individual terms to find \(du/dx\).
$BR $BR
\(\displaystyle \frac{du}{dx}\) = \{ ans_rule(40) \}

$PAR
${BBOLD}Step 4${EBOLD}: Multiply by \(f(x)\) since \(f'(x) = f(x) \cdot \frac{du}{dx}\).
$BR $BR
\(f'(x)\) = \{ ans_rule(40) \}

END_TEXT

Context()->normalStrings;

$showPartialCorrectAnswers = 1;
install_problem_grader(~~&std_problem_grader);

LABELED_ANS( 'logFormula', $logFunc->cmp );

@foundTerm = (0)*$realTerms;
$testMe = "check1";
sub check {
    my ($correct,$student,$self) = @_;  # get the parameters
    my ($v,$w,$dterm) = @{$student};      # extract the student answers

    my $theTerm = Formula("$v * ln(abs($w))");
    ## Verify that it is in the list of terms.
    my ($i, $isFound, $which) = (0,0,0);
    for ($i=0; $isFound==0 && $i<$realTerms; $i++) {
        if ($foundTerm[$i]==1 && $theTerm == $fullTerm[$i]) {
            Value->Error("You already listed this term.") 
        }
        if ($foundTerm[$i]==0 && $theTerm == $fullTerm[$i]) {
            $isFound = 1;
            $which = $i;
            $foundTerm[$i] = 1;
            $testMe = $testMe . " " . $which;
        }
    }
   
    Value->Error("This is not one of the reduced terms") if ($isFound == 0);
    Value->Error("The term is not fully reduced") unless ($v == $vList[$which] && $w == $wList[$which]);
    Value->Error("Incorrect derivative") unless ($dterm == $dList[$which]);

    return $dterm == $dList[$which];
};
        
for ($i=0; $i<$numTerms; $i++) {
    ANS($mp[$i]->cmp(checker=>~~&check));
}

sub finalcheck {
    my ($correct,$student,$self) = @_;  # get the parameters

    my ($i, $allFound, $findStr) = (0,1,"");
    for ($i=0; $i<$realTerms; $i++) {
        $findStr = $findStr . $foundTerm[$i] . " ";
        if ($foundTerm[$i]==0) {
            $allFound = 0;
        }
    }
   
    Value::Error("The terms do not match u") if ($allFound == 0 || $numTerms > $realTerms);
    return $correct == $student;
};
        
ANS( $logDeriv->cmp( checker => ~~&finalcheck ) );

ANS( $deriv->cmp );

ENDDOCUMENT();        # This should be the last executable line in the problem.;
