## DESCRIPTION
## Work with the union and intersection of discrete sets
## ENDDESCRIPTION

## KEYWORDS('equation', 'slope', 'line')


## DBsubject('Discrete Mathematics')
## DBchapter('Sets')
## DBsection('Union and Intersection')
## Date('')
## Author('D. B. Walton')
## Institution('JMU')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')

#
# First comes some stuff that appears at the beginning of every problem
#

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGchoicemacros.pl",
);

# make sure we're in the context we want
Context("Numeric");

# Allow retrys with different values.

# We have three sets coming from {0, 1, 2, ..., 9}
# We need to assign them to sets A, B and C randomly so that 
#   there is a non-empty intersection
@order = NchooseK(10,10);

# We want each portion of the Venn diagram to have at least 2 elements.
#  Decide how many each terms in each intersection.
$inABC = random(1,2);
$innABC = random(0,1);
$inAnBC = random(0,1);
$inABnC = random(0,1);
$extra = 10 - $inABC - $innABC - $inAnBC - $inABnC;

$i = 0;
for ($k=0; $k<$inABC; $k++) {
   $ABC[$k] = $order[$i];
   $i++;
}
for ($k=0; $k<$innABC; $k++) {
   $nABC[$k] = $order[$i];
   $i++;
}
for ($k=0; $k<$inAnBC; $k++) {
   $AnBC[$k] = $order[$i];
   $i++;
}
for ($k=0; $k<$inABnC; $k++) {
   $ABnC[$k] = $order[$i];
   $i++;
}
$inA = 0;  @A = ();
$inB = 0;  @B = ();
$inC = 0;  @C = ();
for ($k=0; $k<$extra; $k++) {
   $which = random(0,2);
   if ($which==0) {
      $A[$inA] = $order[$i];
      $inA++;
   } elsif ($which==1) {
      $B[$inB] = $order[$i];
      $inB++;
   } else {
      $C[$inC] = $order[$i];
      $inC++;
   }
   $i++;
}

$inA += $inAnBC + $inABnC + $inABC;
$inB += $innABC + $inABnC + $inABC;
$inC += $innABC + $inAnBC + $inABC;

$inAorB = $inA + $inBnotA;
@A = ( @A, @AnBC, @ABnC, @ABC );
@B = ( @B, @nABC, @ABnC, @ABC );
@C = ( @C, @nABC, @AnBC, @ABC );

# The sets were created in a random order.
#  Let's sort them for cleaner visual appearance.
for ($i=0; $i<$inA-1; $i++) {
    for ($k=$i+1; $k<$inA; $k++) {
        if ($A[$i] > $A[$k]) {
            $tmp = $A[$i];
            $A[$i] = $A[$k];
            $A[$k] = $tmp;
        }
    }
}
for ($i=0; $i<$inB-1; $i++) {
    for ($k=$i+1; $k<$inB; $k++) {
        if ($B[$i] > $B[$k]) {
            $tmp = $B[$i];
            $B[$i] = $B[$k];
            $B[$k] = $tmp;
        }
    }
}
for ($i=0; $i<$inC-1; $i++) {
    for ($k=$i+1; $k<$inC; $k++) {
        if ($C[$i] > $C[$k]) {
            $tmp = $C[$i];
            $C[$i] = $C[$k];
            $C[$k] = $tmp;
        }
    }
}


Context("Interval");
$setA = Set(@A);
$setB = Set(@B);
$setC = Set(@C);


TEXT(beginproblem());

Context()->texStrings;
BEGIN_TEXT
  Consider the sets \(A = $setA\), \(B = $setB\), and \(C=$setC\).
  
  $PAR
  Find each of the following:
$BR
$BBLOCKQUOTE
\(A \cup B \cap C = \) \{ ans_rule(15) \}
$BR
\((A \cup B) \cap C = \) \{ ans_rule(15) \}
$BR
\(A \cap B \cup C = \) \{ ans_rule(15) \}
$BR
\(A \cap (B \cup C) = \) \{ ans_rule(15) \}
END_TEXT

$showPartialCorrectAnswers = 1;

$ans1 = Set( @A, @nABC );
$ans2 = Set( @AnBC, @nABC, @ABC );
$ans3 = Set( @C, @ABnC );
$ans4 = Set( @ABC, @AnBC, @ABnC );

ANS( $ans1->cmp );
ANS( $ans2->cmp );
ANS( $ans3->cmp );
ANS( $ans4->cmp );


ENDDOCUMENT();        # This should be the last executable line in the problem.


