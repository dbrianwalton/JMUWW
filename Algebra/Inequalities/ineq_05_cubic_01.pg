## DESCRIPTION
## Solving an inequality that involves a cubic polynomial with integer roots.
## ENDDESCRIPTION

## KEYWORDS('algebra','inequality','cubic')
## Tagged by dbw 6/12/12

## DBsubject('Algebra')
## DBchapter('Equations and Inequalities')
## DBsection('Nonlinear Inequalities')
## Date('6/12/12')
## Author('D. B. Walton')
## Institution('James Madison University')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGchoicemacros.pl",
  "PGjmu_poly.pl",
);


###################################
# Setup
###################################
Context("Numeric");

# Choose the random roots for the quadratic.
# Do not allow repeats.
@p = map( $_-9, NchooseK(19,3));

# Put them in order.
@psort = num_sort(@p);
@psortM = PGsort( sub {abs($_[0]) < abs($_[1])}, @p);
$lowFactor = Compute("x-$psortM[0]")->reduce();

# Decide if the leading coefficient is positive or negative.
$leadCoef = non_zero_random(-1,1);
$isPos = ($leadCoef > 0);

$ineqType = random(0,3,1);
$isClosed = $ineqType % 2;
$wantSign = ($ineqType - $isClosed)-1;

@leftCap = ("(","[");
@rightCap = (")", "]");
@ineq = ("<", "\le", ">", "\ge");
$ltgt = $ineq[$ineqType];

# The function coming from those roots.
@c = map($leadCoef*$_, PolyFromRoots(~~@p));
$fcnStr = GenPolyString(~~@c);
$fcn = Compute("$fcnStr")->reduce('(-x)-y'=>0, '(-x)+y'=>0);

# Factored version of the function.
$factorStr = "$leadCoef";
for $i (0..2) {
  $factorStr = $factorStr . "*(x-$psort[$i])";
}
$factorFcn = Compute("$factorStr")->reduce();

@q = map($leadCoef*$_,  PolyFromRoots([$psortM[1], $psortM[2]]));
$quadFactorStr = GenPolyString(~~@q);

Context("Interval");

@testIntervals = (
    Interval("(-INF,$psort[0])"),
    Interval("($psort[0],$psort[1])"),
    Interval("($psort[1],$psort[2])"),
    Interval("($psort[2],INF)")
);
@ineqWord = (
    "less than", 
    "less than or equal to", 
    "greater than", 
    "greater than or equal to"
);
@signSymbol = ("-", "+");

$leftInt = Compute("(-inf,$psort[0] $rightCap[$isClosed]".
    " U $leftCap[$isClosed] $psort[1],$psort[2] $rightCap[$isClosed]");
$rightInt = Compute("$leftCap[$isClosed] $psort[0],$psort[1] $rightCap[$isClosed]" .
    " U $leftCap[$isClosed] $psort[2], INF)");


if ($leadCoef*$wantSign > 0) {
    $solnInterval = $rightInt;
} else {
    $solnInterval = $leftInt;
}

###################################
# Display the Problem
###################################
TEXT(beginproblem);
Context()->texStrings;
BEGIN_TEXT
$PAR
Solve the inequality \($fcn $ltgt 0\).
Express your answer in interval notation.
$PAR
Solution Set: \{ ans_rule(20) \}
END_TEXT
Context()->normalStrings;


###################################
# Answer checking
###################################

ANS( $solnInterval->cmp );

###################################
# Solution
###################################
Context()->texStrings;
BEGIN_SOLUTION
$PAR
${BBOLD}Solution:${EBOLD}

$PAR
Because the inequality is ultimately just about whether the function \(f(x)=$fcn\) is positive or negative, we need to factor \(f(x)\) to determine points where the sign changes.
This factoring can be accomplished, for example, by finding one root and using polynomial division to find a quadratic factor.
Because \(f($psortM[0])=0\) (guess and check), we know that \($lowFactor\) is a factor of \($fcn\).
Polynomial division tells us that the other factor is \($quadFactorStr\).
This can also be factored, so that we find \($fcn = $factorFcn\).
The roots are at \(x=$psort[0]\), \(x=$psort[1]\) and \(x=$psort[2]\).

$PAR
Knowing the roots, we now consider each of the test intervals 
\($testIntervals[0]\), \($testIntervals[1]\), \($testIntervals[2]\), 
and \($testIntervals[3]\).
Testing one \(x\)-value in each of these intervals, the sign of \(f(x)\)
can be determined:
$BCENTER
\{ begintable(2) \}
\{ row( "$SPACE Interval $SPACE", "$SPACE Sign of \(f(x)\) $SPACE") \}
\{ row( "$SPACE \($testIntervals[0]\) $SPACE", 
   "$SPACE \($signSymbol[1-$isPos]\) $SPACE") 
\}
\{ row( "$SPACE \($testIntervals[1]\) $SPACE", 
   "$SPACE \($signSymbol[$isPos]\) $SPACE") 
\}
\{ row( "$SPACE \($testIntervals[2]\) $SPACE", 
   "$SPACE \($signSymbol[1-$isPos]\) $SPACE") 
\}
\{ row( "$SPACE \($testIntervals[3]\) $SPACE", 
   "$SPACE \($signSymbol[$isPos]\) $SPACE") 
\}
\{ endtable() \}
$ECENTER

$PAR
The inequality is looking for where \(f(x) $ltgt 0\), so the solution set is the union of all intervals where \(f(x)\) is $ineqWord[$ineqType] zero.  
So the solution set is \($solnInterval\).

END_SOLUTION
Context()->normalStrings;

COMMENT('Cubic always factors nicely. Random inequality. Solution provided.');
ENDDOCUMENT();        # This should be the last executable line in the problem.;
